[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "can_reach",
        "kind": 2,
        "importPath": "algorithm",
        "description": "algorithm",
        "peekOfCode": "def can_reach(start, N, fuel_max, graph, gas_stations):\n    dist = [float('inf')] * N  # Distance de chaque ville initialisée à l'infini\n    dist[start] = 0  # La distance de la ville de départ est 0\n    pq = [(0, start)]  # File de priorité pour l'algorithme de Dijkstra\n    while pq:\n        fuel_used, node = heapq.heappop(pq)  # On prend la ville avec le moins de carburant utilisé\n        # Si on est dans une station-service, on remet le carburant à 0\n        if gas_stations[node] == 1:\n            fuel_used = 0\n        # On explore les voisins de la ville courante",
        "detail": "algorithm",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "algorithm",
        "description": "algorithm",
        "peekOfCode": "def solve(N, M, L, gas_stations, roads):\n    graph = [[] for _ in range(N)]  # Initialisation du graphe\n    # Construction du graphe à partir des routes\n    for u, v, d in roads:\n        graph[u-1].append((v-1, d))  # Route bidirectionnelle entre u et v\n        graph[v-1].append((u-1, d))\n    # On obtient les distances minimales à partir de la ville 1 (index 0)\n    reachable = can_reach(0, N, L, graph, gas_stations)\n    # On compte combien de villes sont atteignables avec le carburant max L\n    count = sum(1 for dist in reachable if dist <= L)",
        "detail": "algorithm",
        "documentation": {}
    },
    {
        "label": "input_parser",
        "kind": 2,
        "importPath": "algorithm",
        "description": "algorithm",
        "peekOfCode": "def input_parser():\n    input_data = sys.stdin.read().splitlines()  # Lire toutes les lignes d'entrée\n    N, M, L = map(int, input_data[0].split())   # Extraire N, M, L\n    gas_stations = [int(x) for x in input_data[1].strip()] # Extraire la liste des stations-service\n    roads = []  # Liste pour les routes\n    for line in input_data[2:]:  # Lire les routes\n        u, v, d = map(int, line.split())  # Extraire les informations pour chaque route\n        roads.append((u, v, d))  # Ajouter la route à la liste\n    return N, M, L, gas_stations, roads\n# Main - Entrée du programme",
        "detail": "algorithm",
        "documentation": {}
    }
]